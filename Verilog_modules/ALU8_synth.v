/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os) */

(* src = "ALU8.v:10" *)
module ALU8(sel, a, b, y, v, z, c);
  (* src = "ALU8.v:20" *)
  reg _00_;
  (* src = "ALU8.v:20" *)
  reg _01_;
  (* src = "ALU8.v:20" *)
  reg [7:0] _02_;
  (* src = "ALU8.v:20" *)
  reg _03_;
  (* src = "ALU8.v:20" *)
  reg _04_;
  (* src = "ALU8.v:20" *)
  reg _05_;
  (* src = "ALU8.v:20" *)
  reg [7:0] _06_;
  (* src = "ALU8.v:30" *)
  wire [8:0] _07_;
  (* src = "ALU8.v:25" *)
  wire [7:0] _08_;
  (* src = "ALU8.v:34" *)
  wire _09_;
  (* src = "ALU8.v:28" *)
  wire [7:0] _10_;
  (* src = "ALU8.v:26" *)
  wire [7:0] _11_;
  (* src = "ALU8.v:29" *)
  wire [7:0] _12_;
  (* src = "ALU8.v:34" *)
  wire [31:0] _13_;
  (* src = "ALU8.v:27" *)
  wire [7:0] _14_;
  (* src = "ALU8.v:29" *)
  wire _15_;
  (* src = "ALU8.v:29" *)
  wire _16_;
  (* src = "ALU8.v:29" *)
  wire _17_;
  (* src = "ALU8.v:30" *)
  wire _18_;
  (* src = "ALU8.v:30" *)
  wire _19_;
  (* src = "ALU8.v:30" *)
  wire _20_;
  (* src = "ALU8.v:12" *)
  input [7:0] a;
  (* src = "ALU8.v:13" *)
  input [7:0] b;
  (* src = "ALU8.v:17" *)
  output c;
  reg c;
  (* src = "ALU8.v:11" *)
  input [2:0] sel;
  (* src = "ALU8.v:15" *)
  output v;
  reg v;
  (* src = "ALU8.v:14" *)
  output [7:0] y;
  reg [7:0] y;
  (* src = "ALU8.v:16" *)
  output z;
  reg z;
  assign _07_ = a[6:0] + (* src = "ALU8.v:30" *) b[6:0];
  assign _08_ = a & (* src = "ALU8.v:25" *) b;
  assign _09_ = _06_ == (* src = "ALU8.v:34" *) 1'b0;
  assign _10_ = ~ (* src = "ALU8.v:28" *) a;
  assign _11_ = a | (* src = "ALU8.v:26" *) b;
  assign _12_ = a - (* src = "ALU8.v:29" *) b;
  assign _13_ = _09_ ? (* src = "ALU8.v:34" *) 32'd1 : 32'd0;
  assign _14_ = a ^ (* src = "ALU8.v:27" *) b;
  assign _15_ = 1'b0 ^ (* src = "ALU8.v:29" *) a[7];
  assign _16_ = _15_ ^ (* src = "ALU8.v:29" *) b[7];
  assign _17_ = _16_ ^ (* src = "ALU8.v:29" *) _12_[7];
  assign _18_ = _07_[8] ^ (* src = "ALU8.v:30" *) a[7];
  assign _19_ = _18_ ^ (* src = "ALU8.v:30" *) b[7];
  assign _20_ = _19_ ^ (* src = "ALU8.v:30" *) _07_[7];
  always @* begin
    _02_ = _06_;
    _01_ = _05_;
    _00_ = _04_;
    _03_ = _13_[0];
    casez (sel)
      3'b000:
        begin
          _05_ = 1'b0;
          _04_ = 1'b0;
          _06_ = 8'b00000000;
        end
      3'b001:
        begin
          _05_ = 1'b0;
          _04_ = 1'b0;
          _06_ = _08_;
        end
      3'b010:
        begin
          _05_ = 1'b0;
          _04_ = 1'b0;
          _06_ = _11_;
        end
      3'b011:
        begin
          _05_ = 1'b0;
          _04_ = 1'b0;
          _06_ = _14_;
        end
      3'b100:
        begin
          _05_ = 1'b0;
          _04_ = 1'b0;
          _06_ = _10_;
        end
      3'b101:
        begin
          _04_ = 1'b0;
          _06_ = _12_;
          _05_ = _17_;
        end
      3'b110:
        begin
          { _04_, _06_ } = _07_;
          _05_ = _20_;
        end
      3'b111:
        begin
          _05_ = 1'b0;
          _04_ = 1'b0;
          _06_ = 8'b11111111;
        end
      default:
        begin
          _05_ = 1'b0;
          _04_ = 1'b0;
          _06_ = 8'bxxxxxxxx;
        end
    endcase
  end
  always @* begin
      y <= _02_;
      v <= _01_;
      z <= _03_;
      c <= _00_;
  end
endmodule

(* top =  1  *)
(* src = "HA1.v:10" *)
module HA1(a, b, s, Cout);
  wire _0_;
  (* src = "HA1.v:14" *)
  output Cout;
  (* src = "HA1.v:11" *)
  input a;
  (* src = "HA1.v:12" *)
  input b;
  (* src = "HA1.v:13" *)
  output s;
  AND2X2 _1_ (
    .A(a),
    .B(b),
    .Y(Cout)
  );
  NOR2X1 _2_ (
    .A(a),
    .B(b),
    .Y(_0_)
  );
  NOR2X1 _3_ (
    .A(_0_),
    .B(Cout),
    .Y(s)
  );
endmodule
